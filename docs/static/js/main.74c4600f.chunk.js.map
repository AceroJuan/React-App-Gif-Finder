{"version":3,"sources":["Components/addCategory/AddCategory.js","helpers/getGifs.js","Components/gifGridItem/GifGridItem.js","Components/gifGrid/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA4BeA,EAzBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAczC,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,QAK9C,SACE,uBAAOC,KAAK,OAAOC,MAAOT,EAAYU,SAbjB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCSZG,EAhBF,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACRC,EADQ,iDACwCC,UACpDR,GAFY,+DAIKS,MAAMF,GAJX,cAIRG,EAJQ,gBAKSA,EAAKC,OALd,uBAKNC,EALM,EAKNA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAaPM,GAbO,4CAAH,sDCcEO,EAXK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,sBAAKc,UAAU,4DAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCwBKO,EA1BC,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdR,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRvB,EAAQL,GAAU6B,MAAK,SAACd,GACtBY,EAAS,CACPf,KAAMG,EACNU,SAAS,SAGZ,CAACzB,IAEG0B,EDZmBI,CAAa9B,GAA/BY,EADwB,EACxBA,KAAMa,EADkB,EAClBA,QAId,OAFAM,QAAQC,IAAIP,GAGV,qCACE,oBAAIJ,UAAU,qCAAd,SAAoDrB,IACnDyB,EACC,mBAAGJ,UAAU,qDAAb,wBAGE,KACJ,oBAAIA,UAAU,YAAd,SACGT,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEUjBiB,EAzBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,cADrB,mBAClB0C,EADkB,KACN3C,EADM,KAOzB,OACE,mCACE,iCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG2C,EAAWpB,KAAI,SAACd,EAAUgB,GAAX,OACd,cAAC,EAAD,CAAwBhB,SAAUA,GAApBA,c,MCf1BmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.74c4600f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputValue = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 3) {\n      setCategories((category) => [inputValue, ...category]);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputValue} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=1q8bsMLFhZWuVmX3BpYp4CJw8RJqIyKR`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n\nexport default getGifs;\n","import React from \"react\";\n// import PropTypes from 'prop-types'\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__flipInX animate__delay-2s\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\n// GifGridItem.propTypes = {}\n\nexport default GifGridItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useFetchGifs } from \"../../hooks/useFetchGifs\";\nimport GifGridItem from \"../gifGridItem/GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category);\n\n  console.log(loading);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn \">{category}</h3>\n      {loading ? (\n        <p className=\"animate__animated animate__flash animate__delay-2s\">\n          loading...\n        </p>\n      ) : null}\n      <ul className=\"card-grid\">\n        {data.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((img) => {\n      setstate({\n        data: img,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state; // { data: [], loading: true }\n};\n","import React, { useState } from \"react\";\n// import PropTypes from \"prop-types\";\nimport AddCategory from \"./Components/addCategory/AddCategory\";\nimport GifGrid from \"./Components/gifGrid/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Samurai X\"]);\n  //   const handleAdd = () => {\n  //     // let newCategory = \"sailor moon\";\n  //     // setCategories(categories.concat(newCategory));\n  //     setCategories([\"slam dunk\", ...categories]);\n  //   };\n  return (\n    <>\n      <main>\n        <h1>GifExpertApp</h1>\n        <AddCategory setCategories={setCategories} />\n        <hr />\n        <ul>\n          {categories.map((category, id) => (\n            <GifGrid key={category} category={category} />\n          ))}\n        </ul>\n      </main>\n    </>\n  );\n};\n\n// GifExpertApp.propTypes = {};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}