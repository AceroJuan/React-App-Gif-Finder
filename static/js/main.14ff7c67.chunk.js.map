{"version":3,"sources":["Components/AddCategory/AddCategory.js","utils/helpers/getGifs.js","utils/hooks/useGifs.js","Components/GifGridItem/GifGridItem.js","Components/GifGrid/GifGrid.js","Components/GifExpertApp/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","value","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","fixed_height_small","useGifs","loading","state","setState","useEffect","then","GifGridItem","className","src","alt","GifGrid","img","GifExpertApp","defaultCategories","ReactDOM","render","document","getElementById"],"mappings":"mMA8BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,uBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAU,IAC9BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKhB,UACE,4BAAID,IACJ,uBAAOQ,KAAK,OAAOC,SAfH,SAACN,GACnBF,EAAcE,EAAEO,OAAOC,QAcqBA,MAAOX,Q,+BCLxCY,EAhBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UACpDH,GAFY,+DAISI,MAAMF,GAJf,cAIRG,EAJQ,gBAKSA,EAASC,OALlB,uBAKNC,EALM,EAKNA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,mBAAmBZ,QAV1B,kBAaPM,GAbO,4CAAH,sDCqBEO,EAlBC,SAACf,GACf,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNS,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAACP,GACtBK,EAAS,CACPX,KAAMM,EACNG,SAAS,SAGZ,CAAChB,IAEGiB,GCDMI,EAdK,SAAC,GAAoB,IAAlBT,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,sBAAKoB,UAAU,2DAAf,UACE,qBAAKC,IAAKrB,EAAKsB,IAAG,kBAAaZ,KAC/B,mBAAGU,UAAU,UAAb,SAAwBV,QCsBfa,EAxBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SACjB,EAAkCe,EAAQf,GAA5Ba,EAAd,EAAQN,KAAcS,EAAtB,EAAsBA,QAEtB,OACE,qCACGA,GACC,mBAAGM,UAAU,mCAAb,2BAEDtB,EACC,qBAAIsB,UAAU,gBAAd,6BAA+CtB,KAC7C,KACJ,qBAAKsB,UAAU,YAAf,gBACGT,QADH,IACGA,OADH,EACGA,EAAQJ,KAAI,SAACiB,GAAD,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIf,aCIjBgB,G,MAjBM,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,EACnD,EAAoC1C,mBAAS0C,GAA7C,mBAAOlC,EAAP,KAAmBT,EAAnB,KAEA,OACE,qCACE,oBAAIqC,UAAU,oCAAd,kBACA,cAAC,EAAD,CAAarC,cAAeA,IAC5B,uBACA,6BACGS,EAAWe,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,a,MCVxB6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.14ff7c67.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInput = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length >= 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <p>{inputValue}</p>\n      <input type=\"text\" onChange={handleInput} value={inputValue} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=15&api_key=1q8bsMLFhZWuVmX3BpYp4CJw8RJqIyKR`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n  const gifs = data.map((gif) => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.fixed_height_small.url,\n    };\n  });\n  return gifs;\n};\n\nexport default getGifs;\n","import { useEffect, useState } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nconst useGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((images) => {\n      setState({\n        data: images,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state; // { data:[], loading:true }\n};\n\nexport default useGifs;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\n      <img src={url} alt={`info of ${title}`} />\n      <p className=\"card__P\">{title}</p>\n    </div>\n  );\n};\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","import React from \"react\";\nimport useGifs from \"../../utils/hooks/useGifs\";\nimport GifGridItem from \"../GifGridItem/GifGridItem\";\nimport PropTypes from \"prop-types\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useGifs(category);\n\n  return (\n    <>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Cargando ... </p>\n      )}\n      {category ? (\n        <h2 className=\"card-grid__h1\">Resultados para {category}</h2>\n      ) : null}\n      <div className=\"card-grid\">\n        {images?.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React, { useState } from \"react\";\nimport AddCategory from \"../AddCategory/AddCategory\";\nimport GifGrid from \"../GifGrid/GifGrid\";\nimport \"animate.css\";\n\nconst GifExpertApp = ({ defaultCategories = [] }) => {\n  const [categories, setCategories] = useState(defaultCategories);\n\n  return (\n    <>\n      <h1 className=\"animate__animated animate__fadeIn\">Hola</h1>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ul>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./Components/GifExpertApp/GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}